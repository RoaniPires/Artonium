// ====================================================
// CONTROLLER DE APRENDIZADO - HELLO WORLD
// ====================================================
// Este arquivo define nossos endpoints (rotas) da API
// Um Controller agrupa endpoints relacionados

using Microsoft.AspNetCore.Mvc;

// Define o namespace (organiza√ß√£o do c√≥digo)
namespace ArtoniumApi.Controllers;

// ====================================================
// ATRIBUTOS DO CONTROLLER
// ====================================================
[ApiController]              // Indica que esta classe √© um controller de API
[Route("api/[controller]")]  // Define a rota base: /api/hello (nome da classe sem "Controller")
public class HelloController : ControllerBase  // Herda funcionalidades b√°sicas de API
{
    // ====================================================
    // ENDPOINT 1: GET - Buscar uma sauda√ß√£o
    // ====================================================
    // Responde a: GET /api/hello
    [HttpGet]  // Define que este m√©todo responde a requisi√ß√µes GET
    public ActionResult<string> Get()
    {
        // Retorna uma mensagem simples - TESTE HOT RELOAD! üî•
        return Ok("üî• HOT RELOAD funcionando! API Tormenta 20 rodando!");
    }

    // ====================================================
    // ENDPOINT 2: GET com par√¢metro - Sauda√ß√£o personalizada
    // ====================================================
    // Responde a: GET /api/hello/Jo√£o (onde Jo√£o √© o nome)
    [HttpGet("{nome}")]  // {nome} √© um par√¢metro da URL
    public ActionResult<string> GetComNome(string nome)
    {
        // Valida se o nome foi informado
        if (string.IsNullOrEmpty(nome))
        {
            return BadRequest("‚ùå Nome n√£o pode ser vazio!");
        }

        // Retorna sauda√ß√£o personalizada
        return Ok($"üëã Ol√°, {nome}! Bem-vindo √† API Artonium!");
    }

    // ====================================================
    // ENDPOINT 3: POST - Receber dados
    // ====================================================
    // Responde a: POST /api/hello com dados no corpo da requisi√ß√£o
    [HttpPost]  // Define que este m√©todo responde a requisi√ß√µes POST
    public ActionResult<string> Post([FromBody] MensagemRequest request)
    {
        // Valida se a mensagem foi enviada
        if (request?.Mensagem == null)
        {
            return BadRequest("‚ùå Mensagem √© obrigat√≥ria!");
        }

        // Processa e retorna a resposta
        return Ok($"üì® Mensagem recebida: '{request.Mensagem}' - Muito obrigado!");
    }

    // ====================================================
    // ENDPOINT 4: GET - Informa√ß√µes da API
    // ====================================================
    // Responde a: GET /api/hello/info
    [HttpGet("info")]  // Rota espec√≠fica: /api/hello/info
    public ActionResult<object> GetInfo()
    {
        // Retorna informa√ß√µes estruturadas sobre a API
        var info = new
        {
            Nome = "Artonium API",
            Versao = "1.0.0",
            Tecnologia = ".NET 8",
            Ambiente = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Desconhecido",
            DataHora = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"),
            Mensagem = "üöÄ API funcionando perfeitamente!"
        };

        return Ok(info);
    }
}

// ====================================================
// MODELO DE DADOS (DTO - Data Transfer Object)
// ====================================================
// Define a estrutura dos dados que esperamos receber
public class MensagemRequest
{
    // Propriedade que representa a mensagem enviada pelo cliente
    public string? Mensagem { get; set; }
}
